You will be provided the text of an article and a list of locations extracted from that article. Your job is to verify that the locations are relevant to the article, are properly classified, and that redundant and duplicate locations have been removed.

The locations you receive will look like this:

  "locations": [
    {
      "location": "Minnesota",
      "type": "primary",
      "nature": "happened_at",
      "description": "State where the drunken-driving offenses occurred.",
      "formatted_address": "Minnesota, USA",
      "lat": 46.729553,
      "lng": -94.6858998,
      "place_id": "ChIJmwt4YJpbWE0RD6L-EJvJogI",
      "types": [
        "administrative_area_level_1",
        "political"
      ]
    },
    {
      "location": "Maple Grove, MN",
      "type": "primary",
      "nature": "happened_at",
      "description": "Location where the public safety incident took place, involving drunken driving.",
      "formatted_address": "Maple Grove, MN, USA",
      "lat": 45.0724642,
      "lng": -93.4557877,
      "place_id": "ChIJC5s1j7RHs1IRD0FeDiBz_I0",
      "types": [
        "locality",
        "political"
      ]
    },
    {
      "location": "Grove Drive and Elm Creek Boulevard, Maple Grove, MN",
      "type": "primary",
      "nature": "happened_at",
      "description": "Specific location where Troy Riddle was seen before driving away.",
      "formatted_address": "Elm Creek Blvd N & Grove Dr, Maple Grove, MN 55311, USA",
      "lat": 45.1029667,
      "lng": -93.4516969,
      "place_id": "EjdFbG0gQ3JlZWsgQmx2ZCBOICYgR3JvdmUgRHIsIE1hcGxlIEdyb3ZlLCBNTiA1NTMxMSwgVVNBImYiZAoUChIJNxG5buRHs1IR-o0ABVTEs4sSFAoSCTcRuW7kR7NSEfqNAAVUxLOLGhQKEgnXXSASEjizUhGldAfZsuNMxBoUChIJwRBZX-RHs1IRcTtQ-I1-IlgiCg2jKuIaFRdnTMg",
      "types": [
        "intersection"
      ]
    },
    {
      "location": "Mallard Ridge apartments, Maple Grove, MN",
      "type": "primary",
      "nature": "happened_at",
      "description": "Location where Troy Riddle parked after being followed by the caller.",
      "formatted_address": "13301 Maple Knoll Way, Maple Grove, MN 55369, USA",
      "lat": 45.1054652,
      "lng": -93.44972709999999,
      "place_id": "ChIJ4w7k-u9Hs1IRZBnwCrAAteI",
      "types": [
        "establishment",
        "point_of_interest"
      ]
    },
    {
      "location": "Milwaukee, WI",
      "type": "primary",
      "nature": "person_from",
      "description": "City where Troy Riddle lives.",
      "formatted_address": "Milwaukee, WI, USA",
      "lat": 43.0389025,
      "lng": -87.9064736,
      "place_id": "ChIJ50eLV9cCBYgRhHtBtSIZX0Q",
      "types": [
        "locality",
        "political"
      ]
    },
    {
      "location": "Hennepin County Jail, MN",
      "type": "secondary",
      "nature": "",
      "description": "Facility where Troy Riddle was booked and later released on bond.",
      "formatted_address": "Hennepin County, MN, USA",
      "lat": 45.0208911,
      "lng": -93.5094574,
      "place_id": "ChIJpe7ZFZId9ocRnkR32F9xAcw",
      "types": [
        "administrative_area_level_2",
        "political"
      ]
    },
    {
      "location": "Benilde-St. Margaret High School, St. Louis Park, MN",
      "type": "secondary",
      "nature": "",
      "description": "Institution where Troy Riddle coached after his playing career.",
      "formatted_address": "2501 MN-100, St Louis Park, MN 55416, USA",
      "lat": 44.95815109999999,
      "lng": -93.3449998,
      "place_id": "ChIJOUWWia40s1IR9mlbHSBETuE",
      "types": [
        "establishment",
        "point_of_interest",
        "school",
        "secondary_school"
      ]
    },
    {
      "location": "Marquette University, Milwaukee, WI",
      "type": "secondary",
      "nature": "",
      "description": "Institution where Troy Riddle was head coach for the club team.",
      "formatted_address": "1250 W Wisconsin Ave, Milwaukee, WI 53233, USA",
      "lat": 43.0386955,
      "lng": -87.93101399999999,
      "place_id": "ChIJWwzA14EZBYgRCxLMKlhRvVU",
      "types": [
        "establishment",
        "point_of_interest",
        "university"
      ]
    }
  ]

Here is some relevant information for your checks:

* Locations listed as "primary" are considered the most important locations in the story and include locations where news events occurred, places affected by policies, and descriptive information about where key people are from. These relationships are described in the "nature" attribute. Ensure these classifications are defensible, based on your reading of the story.

* Locations listed as "secondary" include all other locations referenced in the piece. They do not have nature attributes.

* All geographic coordinates, place ID and types classification was produced by Google's geocoding API.

Here are your instructions for performing the checks:

* If a more specific location is contained within a more general one, remove the more general one. In the example above, the address "Grove Drive and Elm Creek Boulevard, Maple Grove, MN" is contained within "Maple Grove, MN," which is also listed as an entity. In this case, the "Maple Grove, MN" entity should be removed. These relations can be more than one level deep. "Minnesota" is also listed as a location but encompasses all of the other locations and should be removed as well.

* Create a top-level attribute called "check" and another called "notes." Check should contain the value "ok" if all relevant locations are present and properly classified per the instructions above. It should contain "review" if you believe the relevant locations are not present or are improperly classified. If you set check to "review" include a brief description of your reasoning in the "notes" attribute. Otherwise leave it blank.

You should return a JSON object that contains an exact copy of the object you received as input, minus any locations that should be removed. Add the "check" and "noted" attributes like this:

{
    "check": "ok",
    "notes": "",
    "locations": [... copy of above]
}

If you find any issues that need review, return a JSON object like this:

{
    "check": "review",
    "notes": "Detailed explanation of issues found",
    "locations": [... locations array with changes ...]
}

If no issues are found, simply return:

{
    "check": "ok"
}